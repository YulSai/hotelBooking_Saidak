# DataBase Connection Properties
#db.url=jdbc:postgresql://localhost:5432/hotelBooking
#db.login=postgres
#db.password=root
db.url=jdbc:postgresql://kashin.db.elephantsql.com/xpuabadl
db.login=xpuabadl
db.password=M7MUOG0MHDT88KO9Re1n0AUZe-cP55NP
db.driver=org.postgresql.Driver
# SqlDao Queries Properties
## ReservationInfo
sql.reservation.info.find.by.id=\
                                SELECT i.id, i.reservation_id, i.room_id, i.check_in, i.check_out, i.nights, i.room_price \
                                FROM reservation_info i \
                                WHERE i.id=? AND i.deleted=false;
sql.reservation.info.find.all=\
                                SELECT i.id, i.reservation_id, i.room_id, i.check_in, i.check_out, i.nights, i.room_price \
                                FROM reservation_info i \
                                WHERE i.deleted=false;
sql.reservation.info.create=\
                                INSERT INTO reservation_info (reservation_id, room_id, check_in, check_out, nights, room_price) \
                                VALUES (?, ?, ?, ?, ?, ?);
sql.reservation.info.update=\
                                UPDATE reservation_info \
                                SET room_id=?, check_in=?, check_out=?, nights=?, room_price=? \
                                WHERE id=? AND deleted=false;
sql.reservation.info.delete=\
                                UPDATE reservation_info \
                                SET deleted=true \
                                WHERE id=?;
sql.reservation.info.page=\
                                SELECT i.id, i.reservation_id, i.room_id, i.check_in, i.check_out, i.nights, i.room_price \
                                FROM reservation_info i \
                                WHERE i.deleted = false \
                                ORDER BY id LIMIT ? OFFSET ?;
sql.reservation.info.count.reservations.info=\
                                SELECT COUNT(*) AS total FROM reservation_info WHERE i.deleted = false;
sql.reservation.info.find0be.reservation.id=\
                                SELECT i.id, i.reservation_id, i.room_id, i.check_in, i.check_out, i.nights, i.room_price \
                                FROM reservation_info i \
                                WHERE i.reservation_id=? AND i.deleted=false;
## Reservation
sql.reservation.find.by.id=\
                                SELECT rs.id, rs.user_id, rs.total_cost, sr.name AS status \
                                FROM reservations rs \
                                JOIN reservation_statuses sr ON sr.id = rs.status_id \
                                WHERE rs.id=? AND rs.deleted=false;
sql.reservation.find.all=\
                                SELECT rs.id, rs.user_id, rs.total_cost, sr.name AS status \
                                FROM reservations rs \
                                JOIN reservation_statuses sr ON sr.id = rs.status_id \
                                WHERE rs.deleted=false;
sql.reservation.create=\
                                INSERT INTO reservations (user_id, total_cost, status_id) \
                                VALUES (?, ?, (SELECT id FROM reservation_statuses s WHERE s.name=?));
sql.reservation.update=\
                                UPDATE reservations \
                                SET user_id=?, total_cost=?, \
                                status_id=(SELECT s.id FROM reservation_statuses s WHERE s.name=?) \
                                WHERE id=? AND deleted=false;
sql.reservation.delete=\
                                UPDATE reservations \
                                SET deleted=true \
                                WHERE id=?;
sql.reservation.page=\
                                SELECT rs.id, rs.user_id, rs.total_cost, sr.name AS status \
                                FROM reservations rs \
                                JOIN reservation_statuses sr ON sr.id = rs.status_id \
                                WHERE rs.deleted = false \
                                ORDER BY id LIMIT ? OFFSET ?;
sql.reservation.count.reservations=\
                                SELECT COUNT(*) AS total FROM reservations;
## Room
sql.room.find.by.id=\
                                SELECT r.id, r.room_number, t.name AS type, c.name AS capacity, r.price, s.name AS status \
                                FROM rooms r \
                                JOIN room_type t ON r.room_type_id = t.id \
                                JOIN room_capacity c ON r.room_capacity_id = c.id \
                                JOIN room_status s ON r.room_status_id = s.id \
                                WHERE r.id = ? AND r.deleted = false;
sql.room.find.all=\
                                SELECT r.id, r.room_number, t.name AS type, c.name AS capacity, r.price, s.name AS status \
                                FROM rooms r \
                                JOIN room_type t ON r.room_type_id = t.id \
                                JOIN room_capacity c ON r.room_capacity_id = c.id \
                                JOIN room_status s ON r.room_status_id = s.id \
                                WHERE r.deleted = false;
sql.room.create=\
                                INSERT INTO rooms (room_number, room_type_id, room_capacity_id, price, room_status_id) \
                                VALUES (?, (SELECT id FROM room_type t WHERE t.name=?), \
                                (SELECT id FROM room_capacity c WHERE c.name=?), ?, \
                                (SELECT id FROM room_status s WHERE s.name=?));
sql.room.update=\
                                UPDATE rooms r SET room_number=?, room_type_id=(SELECT id FROM room_type t WHERE t.name=?), \
                                room_capacity_id=(SELECT id FROM room_capacity c WHERE c.name=?), price=?, \
                                room_status_id=(SELECT id FROM room_status s WHERE s.name=?) \
                                WHERE id = ? AND r.deleted = false;
sql.room.delete=\
                                UPDATE rooms \
                                SET deleted = true \
                                WHERE id = ?;
sql.room.find.by.number=\
                                SELECT r.id, r.room_number, t.name AS type, c.name AS capacity, r.price, s.name AS status \
                                FROM rooms r \
                                JOIN room_type t ON r.room_type_id = t.id \
                                JOIN room_capacity c ON r.room_capacity_id = c.id \
                                JOIN room_status s ON r.room_status_id = s.id \
                                WHERE r.room_number = ? AND r.deleted = false;
sql.room.count.rooms=\
                                SELECT COUNT(*) AS total FROM rooms;
sql.room.find.all.available.rooms=\
                                SELECT r.id, r.room_number, t.name AS type, c.name AS capacity, r.price, s.name AS status \
                                FROM rooms r \
                                JOIN room_type t ON r.room_type_id = t.id \
                                JOIN room_capacity c ON r.room_capacity_id = c.id \
                                JOIN room_status s ON r.room_status_id = s.id \
                                WHERE r.room_status_id=(SELECT id FROM room_status s WHERE s.name='AVAILABLE') \
                                AND r.room_type_id=(SELECT id FROM room_type t WHERE t.name=?) \
                                AND r.room_capacity_id=(SELECT id FROM room_capacity c WHERE c.name=?) AND NOT EXISTS \
                                (SELECT NULL FROM reservation_info i \
                                join reservations rv on rv.id = i.reservation_id \
                                WHERE i.room_id = r.id AND (rv.status_id=(SELECT id FROM reservation_statuses rs \
                                WHERE rs.name='CONFIRMED') AND ((? between i.check_in AND i.check_out) \
                                OR (? between i.check_in AND i.check_out) OR ((? < i.check_in) AND (? > i.check_out)))));
sql.room.page=\
                                SELECT r.id, r.room_number, t.name AS type, c.name AS capacity, r.price, s.name AS status \
                                FROM rooms r \
                                JOIN room_type t ON r.room_type_id = t.id \
                                JOIN room_capacity c ON r.room_capacity_id = c.id \
                                JOIN room_status s ON r.room_status_id = s.id \
                                WHERE r.deleted = false \
                                ORDER BY r.room_number LIMIT ? OFFSET ?;
## User
sql.user.find.by.id=\
                                SELECT u.id, u.first_name, u.last_name, u.email, u.password, u.phone_number, r.name AS role \
                                FROM users u \
                                JOIN roles r ON u.role_id = r.id \
                                WHERE u.id = ? AND u.deleted = false;
sql.user.find.all=\
                                SELECT u.id, u.first_name, u.last_name, u.email, u.password, u.phone_number, r.name AS role \
                                FROM users u \
                                JOIN roles r ON u.role_id = r.id \
                                WHERE u.deleted = false;
sql.user.create=\
                                INSERT INTO users (first_name, last_name, email, password, phone_number, role_id) \
                                VALUES (?, ?, ?, ?, ?, (SELECT id FROM roles r WHERE r.name = ?));
sql.user.update=\
                                UPDATE users u SET first_name = ?, last_name = ?, email = ?, password = ?, phone_number = ?, \
                                role_id = (SELECT id FROM roles r WHERE r.name = ?) \
                                WHERE u.id = ? AND u.deleted = false;
sql.user.delete=\
                                UPDATE users \
                                SET deleted = true \
                                WHERE id = ?;
sql.user.find.by.email=\
                                SELECT u.id, u.first_name, u.last_name, u.email, u.password, u.phone_number, r.name AS role \
                                FROM users u \
                                JOIN roles r ON u.role_id = r.id \
                                WHERE u.email = ? AND u.deleted = false;
sql.user.count.users=\
                                SELECT COUNT(*) AS total FROM users;
sql.user.page=\
                                SELECT u.id, u.first_name, u.last_name, u.email, u.password, u.phone_number, r.name AS role \
                                FROM users u \
                                JOIN roles r ON u.role_id = r.id \
                                WHERE u.deleted = false \
                                ORDER BY last_name LIMIT ? OFFSET ?;
# Servlet URLs Properties
## Start
page.index=index.jsp
page.main=jsp/main.jsp
## Error
page.error=jsp/error.jsp
## Reservation
page.reservations=jsp/forms/reservations/reservations.jsp
page.reservation=jsp/forms/reservations/reservation.jsp
page.create.reservation=jsp/forms/reservations/createReservationForm.jsp
page.update.reservation=jsp/forms/reservations/updateReservationForm.jsp
page.search.available=jsp/forms/reservations/searchAvailableRoomsForm.jsp
page.rooms.available=jsp/forms/reservations/roomsAvailable.jsp
page.booking=jsp/forms/reservations/booking.jsp
## Room
page.rooms=jsp/forms/rooms/rooms.jsp
page.room=jsp/forms/rooms/room.jsp
page.create.room=jsp/forms/rooms/createRoomForm.jsp
page.update.room=jsp/forms/rooms/updateRoomForm.jsp
## User
page.users=jsp/forms/users/users.jsp
page.user=jsp/forms/users/user.jsp
page.create.user=jsp/forms/users/createUserForm.jsp
page.update.user=jsp/forms/users/updateUserForm.jsp
##Login
page.login=jsp/forms/authorizations/loginForm.jsp


