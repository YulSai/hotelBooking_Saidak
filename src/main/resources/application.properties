# DataBase Connection Properties
db.url=jdbc:postgresql://localhost:5432/hotelBooking
db.login=postgres
db.password=root
db.driver=org.postgresql.Driver
# SqlDao Queries Properties
## Reservation
sql.reservation.find.by.id=SELECT rs.id, rs.user_id, rs.room_id, t.name AS type, c.name AS capacity, rs.check_in, \
                                rs.check_out, rs.room_price, rs.total_cost, sr.name AS status \
                                FROM reservations rs \
                                JOIN reservation_statuses sr ON sr.id = rs.status_id \
                                JOIN room_type t ON t.id = rs.type_id \
                                JOIN room_capacity c  ON c.id = rs.capacity_id \
                                WHERE rs.id=? AND rs.deleted=false;
sql.reservation.find.all=SELECT rs.id, rs.user_id, rs.room_id, t.name AS type, c.name AS capacity, rs.check_in, \
                                rs.check_out, rs.room_price, rs.total_cost, sr.name AS status \
                                FROM reservations rs \
                                JOIN reservation_statuses sr ON sr.id = rs.status_id \
                                JOIN room_type t ON t.id = rs.type_id \
                                JOIN room_capacity c  ON c.id = rs.capacity_id \
                                WHERE rs.deleted=false;
sql.reservation.create=INSERT INTO reservations (user_id, room_id, type_id, capacity_id, check_in, check_out, \
                                room_price, total_cost, status_id) \
                                VALUES (?, ?, (SELECT id FROM room_type t WHERE t.name='?'), \
                                (SELECT id FROM room_capacity c WHERE c.name=?), ?, ?, ?, \
                                (SELECT id FROM reservation_statuses s WHERE s.name=?));
sql.reservation.update=UPDATE reservations \
                                SET user_id=?, room_id=?, type_id=(SELECT id FROM room_type t WHERE t.name='?'), \
                                capacity_id=(SELECT id FROM room_capacity c WHERE c.name=?), \
                                check_in=?, check_out=?, room_price=?, total_cost=?, status_id=(SELECT s.id FROM reservation_statuses s \
                                WHERE s.name=?) \
                                WHERE id=? AND deleted=false;
sql.reservation.delete=UPDATE reservations \
                                SET deleted=true \
                                WHERE id=?;
sql.reservation.difference.date=\
                                SELECT check_out::date - check_in::date AS difference \
                                FROM reservations \
                                WHERE id=?;
sql.reservation.find.all.reservation.by.room.id.and.time.period=\
                                SELECT rs.id, rs.user_id, rs.room_id, t.name AS type, c.name AS capacity, rs.check_in, \
                                rs.check_out, rs.room_price, rs.total_cost, sr.name AS status \
                                FROM reservations rs \
                                JOIN reservation_statuses sr ON sr.id = rs.status_id \
                                JOIN room_type t ON t.id = rs.type_id \
                                JOIN room_capacity c  ON c.id = rs.capacity_id \
                                WHERE room_id = ? \
                                AND (check_in BETWEEN ? AND ?);
sql.reservation.find.all.reservation.by.user.id.and.time.period=\
                                SELECT rs.id, rs.user_id, rs.room_id, t.name AS type, c.name AS capacity, rs.check_in, \
                                rs.check_out, rs.room_price, rs.total_cost, sr.name AS status \
                                FROM reservations rs \
                                JOIN reservation_statuses sr ON sr.id = rs.status_id \
                                JOIN room_type t ON t.id = rs.type_id \
                                JOIN room_capacity c  ON c.id = rs.capacity_id \
                                WHERE user_id = ? \
                                AND check_in > ?;
sql.reservation.page=SELECT rs.id, rs.user_id, rs.room_id, t.name AS type, c.name AS capacity, rs.check_in, \
                                rs.check_out, rs.room_price, rs.total_cost, sr.name AS status \
                                FROM reservations rs \
                                JOIN reservation_statuses sr ON sr.id = rs.status_id \
                                JOIN room_type t ON t.id = rs.type_id \
                                JOIN room_capacity c  ON c.id = rs.capacity_id \
                                ORDER BY id LIMIT ? OFFSET ?;
sql.reservation.count.reservations=\
                                SELECT COUNT(*) AS total FROM reservations rs WHERE rs.deleted = false;
sql.reservation.total.count.by.user.id=\
                                SELECT COUNT(*) AS total FROM reservations rs\
                                JOIN rooms r ON rs.room_id = r.room.id \
                                WHERE rs.user_id = ?";
sql.reservation.get.page.by.user.id=\
                                SELECT rs.id, rs.user_id, rs.room_id, t.name AS type, c.name AS capacity, rs.check_in, \
                                rs.check_out, rs.room_price, rs.total_cost, sr.name AS status \
                                FROM reservations rs \
                                JOIN reservation_statuses sr ON sr.id = rs.status_id \
                                JOIN room_type t ON t.id = rs.type_id \
                                JOIN room_capacity c  ON c.id = rs.capacity_id \
                                WHERE rs.user_id = ? ORDER BY id LIMIT ? OFFSET ?;
sql.reservation.page.in.progress=\
                                SELECT rs.id, rs.user_id, rs.room_id, t.name AS type, c.name AS capacity, rs.check_in, \
                                rs.check_out, rs.room_price, rs.total_cost, sr.name AS status \
                                FROM reservations rs \
                                JOIN reservation_statuses sr ON sr.id = rs.status_id \
                                JOIN room_type t ON t.id = rs.type_id \
                                JOIN room_capacity c  ON c.id = rs.capacity_id \
                                WHERE status_id=(SELECT id FROM reservation_statuses sr \
                                WHERE sr.name='IN_PROGRESS') ORDER BY id LIMIT ? OFFSET ?;
sql.reservation.total.count.in.progress=\
                                SELECT COUNT(*) AS total FROM reservations \
                                WHERE status_id=(SELECT id FROM reservation_statuses sr \
                                WHERE sr.name='IN_PROGRESS');
## Room
sql.room.find.by.id=SELECT r.id, r.room_number, t.name AS type, c.name AS capacity, r.price, s.name AS status \
                                FROM rooms r \
                                JOIN room_type t ON r.room_type_id = t.id \
                                JOIN room_capacity c ON r.room_capacity_id = c.id \
                                JOIN room_status s ON r.room_status_id = s.id \
                                WHERE r.id = ? AND r.deleted = false;
sql.room.find.all=SELECT r.id, r.room_number, t.name AS type, c.name AS capacity, r.price, s.name AS status \
                                FROM rooms r \
                                JOIN room_type t ON r.room_type_id = t.id \
                                JOIN room_capacity c ON r.room_capacity_id = c.id \
                                JOIN room_status s ON r.room_status_id = s.id \
                                WHERE r.deleted = false;
sql.room.create=INSERT INTO rooms (room_number, room_type_id, room_capacity_id, price, room_status_id) \
                                VALUES (?, (SELECT id FROM room_type t WHERE t.name=?), \
                                (SELECT id FROM room_capacity c WHERE c.name=?), ?, \
                                (SELECT id FROM room_status s WHERE s.name=?));
sql.room.update=UPDATE rooms r SET room_number=?, room_type_id=(SELECT id FROM room_type t WHERE t.name=?), \
                                room_capacity_id=(SELECT id FROM room_capacity c WHERE c.name=?), price=?, \
                                room_status_id=(SELECT id FROM room_status s WHERE s.name=?) \
                                WHERE id = ? AND r.deleted = false;
sql.room.delete=UPDATE rooms \
                                SET deleted = true \
                                WHERE id = ?;
sql.room.find.by.number=SELECT r.id, r.room_number, t.name AS type, c.name AS capacity, r.price, s.name AS status \
                                FROM rooms r \
                                JOIN room_type t ON r.room_type_id = t.id \
                                JOIN room_capacity c ON r.room_capacity_id = c.id \
                                JOIN room_status s ON r.room_status_id = s.id \
                                WHERE r.room_number = ? AND r.deleted = false;
sql.room.count.rooms=SELECT COUNT(*) AS total FROM rooms r WHERE r.deleted = false;
sql.room.find.all.available.rooms=\
                                SELECT r.id, r.room_number, t.name AS type, c.name AS capacity, r.price, s.name AS status \
                                FROM rooms r \
                                JOIN room_type t ON r.room_type_id = t.id \
                                JOIN room_capacity c ON r.room_capacity_id = c.id \
                                JOIN room_status s ON r.room_status_id = s.id \
                                WHERE r.room_status_id=(SELECT id FROM room_status s WHERE s.name='AVAILABLE') \
                                AND r.room_type_id=(SELECT id FROM room_type t WHERE t.name=?) \
                                AND r.room_capacity_id=(SELECT id FROM room_capacity c WHERE c.name=?) \
                                AND NOT EXISTS (SELECT NULL FROM reservations rv WHERE rv.room_id = r.id AND \
                                (rv.status_id=(SELECT id FROM reservation_statuses rs WHERE rs.name='CONFIRMED') \
                                AND ((? between rv.check_in AND rv.check_out) OR (? between rv.check_in AND rv.check_out) \
                                OR ((? < rv.check_in) AND (? > rv.check_out)))));
sql.room.page=SELECT r.id, r.room_number, t.name AS type, c.name AS capacity, r.price, s.name AS status \
                                FROM rooms r \
                                JOIN room_type t ON r.room_type_id = t.id \
                                JOIN room_capacity c ON r.room_capacity_id = c.id \
                                JOIN room_status s ON r.room_status_id = s.id \
                                ORDER BY r.room_number LIMIT ? OFFSET ?;
## User
sql.user.find.by.id=SELECT u.id, u.first_name, u.last_name, u.email, u.password, u.phone_number, r.name AS role \
                                FROM users u \
                                JOIN roles r ON u.role_id = r.id \
                                WHERE u.id = ? AND u.deleted = false;
sql.user.find.all=SELECT u.id, u.first_name, u.last_name, u.email, u.password, u.phone_number, r.name AS role \
                                FROM users u \
                                JOIN roles r ON u.role_id = r.id \
                                WHERE u.deleted = false;
sql.user.create=INSERT INTO users (first_name, last_name, email, password, phone_number, role_id) \
                                VALUES (?, ?, ?, ?, ?, (SELECT id FROM roles r WHERE r.name = ?));
sql.user.update=UPDATE users u SET first_name = ?, last_name = ?, email = ?, password = ?, phone_number = ?, \
                                role_id = (SELECT id FROM roles r WHERE r.name = ?) \
                                WHERE u.id = ? AND u.deleted = false;
sql.user.delete=UPDATE users \
                                SET deleted = true \
                                WHERE id = ?;
sql.user.find.by.email=SELECT u.id, u.first_name, u.last_name, u.email, u.password, u.phone_number, r.name AS role \
                                FROM users u \
                                JOIN roles r ON u.role_id = r.id \
                                WHERE u.email = ? AND u.deleted = false;
sql.user.find.by.last.name=SELECT u.id, u.first_name, u.last_name, u.email, u.password, u.phone_number, r.name AS role \
                                FROM users u \
                                JOIN roles r ON u.role_id = r.id \
                                WHERE u.last_name = ? AND u.deleted = false;
sql.user.count.users=SELECT COUNT(*) AS total FROM users;
sql.user.find.by.email.and.password=\
                                SELECT u.id, u.first_name, u.last_name, u.email, u.password, u.phone_number, r.name AS role \
                                FROM users u \
                                JOIN roles r ON u.role_id = r.id \
                                WHERE u.email = ? AND u.password = ? AND u.deleted = false;
sql.user.page=SELECT u.id, u.first_name, u.last_name, u.email, u.password, u.phone_number, r.name AS role \
                                FROM users u \
                                JOIN roles r ON u.role_id = r.id \
                                ORDER BY last_name LIMIT ? OFFSET ?;
# Servlet URLs Properties
## Start
page.index=index.jsp
page.main=jsp/main.jsp
## Error
page.error=jsp/error.jsp
## Reservation
page.reservations=jsp/forms/reservations/reservations.jsp
page.reservation=jsp/forms/reservations/reservation.jsp
page.create.reservation=jsp/forms/reservations/createReservationForm.jsp
page.update.reservation=jsp/forms/reservations/updateReservationForm.jsp
page.booking=jsp/forms/reservations/booking.jsp
page.invoices=jsp/forms/reservations/invoices.jsp
## Room
page.rooms=jsp/forms/rooms/rooms.jsp
page.room=jsp/forms/rooms/room.jsp
page.create.room=jsp/forms/rooms/createRoomForm.jsp
page.update.room=jsp/forms/rooms/updateRoomForm.jsp
page.search.available=jsp/forms/rooms/searchAvailableRoomsForm.jsp
page.rooms.available=jsp/forms/rooms/roomsAvailable.jsp
## User
page.users=jsp/forms/users/users.jsp
page.user=jsp/forms/users/user.jsp
page.create.user=jsp/forms/users/createUserForm.jsp
page.update.user=jsp/forms/users/updateUserForm.jsp
page.login=jsp/forms/users/loginForm.jsp


