# DataBase Connection Properties
db.url=jdbc:postgresql://localhost:5432/hotelBooking
db.login=postgres
db.password=root
db.driver=org.postgresql.Driver


# SqlDao Queries Properties
## Reservation
sql.reservation.find.by.id=	    SELECT rs.id, rs.user_id, rs.total_cost, s.name AS status \
                                FROM reservations rs \
                                JOIN statuses s ON s.id = rs.status_id \
                                WHERE rs.id=? AND rs.deleted=false;
sql.reservation.find.all=		SELECT rs.id, rs.user_id, rs.total_cost, s.name AS status \
                                FROM reservations rs \
                                JOIN statuses s ON s.id = rs.status_id \
                                WHERE rs.deleted=false;
sql.reservation.create=         INSERT INTO reservations (user_id, total_cost, status_id) \
                                VALUES (?, ?, (SELECT s.id FROM statuses s WHERE s.name=?));
sql.reservation.update=         UPDATE reservations \
                                SET user_id=?,total_cost=?,status_id=(SELECT s.id FROM statuses s WHERE s.name=?) \
                                WHERE id=? AND deleted=false;
sql.reservation.delete=		    UPDATE reservations \
                                SET deleted=true \
                                WHERE id=?;
sql.reservation.difference.date= \
                                SELECT DATEDIFF(check_out,check_in) AS difference \
                                FROM reservations \
                                WHERE id =?;
sql.reservation.find.all.reservation.by.room.id.and.time.period= \
                                SELECT * FROM reservations WHERE (room_id = ?) AND (check_in BETWEEN ? AND ?)";
sql.reservation.find.all.reservation.by.user.id.and.time.period= \
                                SELECT * FROM reservations WHERE (user_id = ?) AND (check_in > ?);

## Room
sql.room.find.by.id=            SELECT r.id, r.number, t.name AS type, c.name AS capacity, r.price, s.name AS status \
                                FROM rooms r \
                                JOIN room_type t ON r.room_type_id = t.id \
                                JOIN room_capacity c ON r.room_capacity_id = c.id \
                                JOIN room_status s ON r.room_status_id = s.id \
                                WHERE r.id = ? AND r.deleted = false;
sql.room.find.all=              SELECT r.id, r.number, t.name AS type, c.name AS capacity, r.price, s.name AS status \
                                FROM rooms r \
                                JOIN room_type t ON r.room_type_id = t.id \
                                JOIN room_capacity c ON r.room_capacity_id = c.id \
                                JOIN room_status s ON r.room_status_id = s.id \
                                WHERE r.deleted = false;
sql.room.create= 				INSERT INTO rooms (number, room_type_id, room_capacity_id, price, room_status_id) \
                                VALUES (?, (SELECT id FROM room_type t WHERE t.name=?), \
                                (SELECT id FROM room_capacity c WHERE c.name=?), ?, \
                                (SELECT id FROM room_status s WHERE s.name=?));
sql.room.update=                UPDATE rooms r SET number=?, room_type_id=(SELECT id FROM room_type t WHERE t.name=?), \
                                room_capacity_id=(SELECT id FROM room_capacity c WHERE c.name=?), price=?, \
                                room_status_id=(SELECT id FROM room_status s WHERE s.name=?) \
                                WHERE id = ? AND r.deleted = false;
sql.room.delete=                UPDATE rooms \
                                SET deleted = true \
                                WHERE id = ?;
sql.room.find.by.number=		SELECT r.id, r.number, t.name AS type, c.name AS capacity, r.price, s.name AS status \
                                FROM rooms r \
                                JOIN room_type t ON r.room_type_id = t.id \
                                JOIN room_capacity c ON r.room_capacity_id = c.id \
                                JOIN room_status s ON r.room_status_id = s.id \
                                WHERE r.number = ? AND r.deleted = false;
sql.room.count.rooms=			SELECT COUNT(*) FROM rooms r WHERE r.deleted = false;

sql.room.find.all.available.rooms= \
                                SELECT * FROM room r \
                                WHERE room_status=(SELECT id FROM room_status s WHERE s.name='AVAILABLE') AND NOT EXISTS \
                                (SELECT NULL FROM reservation rv WHERE rv.room_id = r.id AND (rv.status='CONFIRMED' \
                                AND ((? between rv.check_in AND rv.check_out) OR (? between rv.check_in AND rv.check_out) \
                                OR ((? < rv.check_in) AND (? > rv.check_out)))));

## User
sql.user.find.by.id=			SELECT u.id, u.first_name, u.last_name, u.email, u.password, u.phone_number, r.name AS role \
                                FROM users u \
                                JOIN roles r ON u.role_id = r.id \
                                WHERE u.id = ? AND u.deleted = false;
sql.user.find.all=				SELECT u.id, u.first_name, u.last_name, u.email, u.password, u.phone_number, r.name AS role \
                                FROM users u \
                                JOIN roles r ON u.role_id = r.id \
                                WHERE u.deleted = false;
sql.user.create=				INSERT INTO users (first_name, last_name, email, password, phone_number, role_id) \
                                VALUES (?, ?, ?, ?, ?, (SELECT id FROM roles r WHERE r.name = ?));
sql.user.update=		        UPDATE users u SET first_name = ?, last_name = ?, email = ?, password = ?, phone_number = ?, \
                                role_id = (SELECT id FROM roles r WHERE r.name = ?) \
                                WHERE u.id = ? AND u.deleted = false;
sql.user.delete=	        	UPDATE users \
                                SET deleted = true \
                                WHERE id = ?;
sql.user.find.by.email=	       	SELECT u.id, u.first_name, u.last_name, u.email, u.password, u.phone_number, r.name AS role \
                                FROM users u \
                                JOIN roles r ON u.role_id = r.id \
                                WHERE u.email = ? AND u.deleted = false;
sql.user.find.by.last.name=	   	SELECT u.id, u.first_name, u.last_name, u.email, u.password, u.phone_number, r.name AS role \
                                FROM users u \
                                JOIN roles r ON u.role_id = r.id \
                                WHERE u.last_name = ? AND u.deleted = false;
sql.user.count.users=	       	SELECT COUNT(*) FROM users;
sql.user.find.by.email.and.password= \
                                SELECT u.id, u.first_name, u.last_name, u.email, u.password, u.phone_number, r.name AS role \
                                FROM users u \
                                JOIN roles r ON u.role_id = r.id \
                                WHERE u.email = ? AND u.password = ? AND u.deleted = false;


# Servlet URLs Properties
## Start
page.index=index.jsp
page.home=home.jsp

## Error
page.error=jsp/error.jsp

## Payment
page.payments=jsp/payments.jsp
page.payment=jsp/payment.jsp
page.create.payment=jsp/form/createPaymentForm.jsp
page.update.payment=jsp/form/updatePaymentForm.jsp

## Reservation
page.reservations=jsp/reservations/reservations.jsp
page.reservation=jsp/reservations/reservation.jsp
page.create.reservation=jsp/reservations/createReservationForm.jsp
page.update.reservation=jsp/reservations/updateReservationForm.jsp
page.booking=jsp/reservations/booking.jsp

## Room
page.rooms=jsp/rooms/rooms.jsp
page.room=jsp/rooms/room.jsp
page.create.room=jsp/rooms/createRoomForm.jsp
page.update.room=jsp/rooms/updateRoomForm.jsp

## User
page.users=jsp/users/users.jsp
page.user=jsp/users/user.jsp
page.create.user=jsp/users/createUserForm.jsp
page.update.user=jsp/users/updateUserForm.jsp
page.login=jsp/users/loginForm.jsp


